job "${job_name}" {
  type = "service"
  datacenters = ["${datacenter}"]

  constraint {
    attribute = "$${attr.unique.hostname}" # Nomad variable, not Terraform template variable
    value = "${hostname_constraint}"
  }

  update {
    max_parallel = 1
  }

  group "webapp" {
    count = 1

    network {
      mode = "host"
      port "http" {
        host_network = "${host_network}"
        to = 3000
      }
    }

    task "webapp" {
      driver = "docker"

      config {
        image                  = "ghcr.io/sargassum-world/fluitans:${fluitans_version}"
        ports                  = ["http"]
        advertise_ipv6_address = true

        mount {
          type     = "volume"
          target   = "/var/fluitans/data"
          source   = "${service_name}-data"
          readonly = false
        }
      }

      env {
        # For nicer display names by indirection and HTTPS we could instead use the reverse-proxied
        # domain name, e.g. fluitans-pslive-ztcontroller.s.foundations.infra.sargassum.world instead
        # of a bare IP address. However, that may not be necessary - and it would introduce coupling
        # with the platform's Caddy configuration. It would be better to instead associate display
        # names with controller ZeroTier addresses in a database table in Fluitans. And for HTTPS
        # we should just use Consul Connect.
        # ZTCONTROLLER_SERVER = "http://$${NOMAD_ADDR_zerotier_api}" # Nomad variable, not Terraform template variable
        DNS_DOMAIN_NAME     = "${dns_domain_name}"
        DNS_SERVER          = "https://desec.io"
        DATABASE_URI        = "file:/var/fluitans/data/db.sqlite3"
      }

      template {
        # We have to manually process IP addresses to wrap square brackets around IPv6 addresses,
        # because apparently Nomad doesn't do that.
        data = <<-EOH
          {{- range $service := nomadService "${service_name}-ztcontroller" -}}
            {{- $upstreamAddress := $service.Address -}}
            {{- $isIPv6 := and (sprig_contains ":" $service.Address) (not (sprig_contains "://" $service.Address)) -}}
            {{- if $isIPv6 -}}
              {{- $upstreamAddress = printf "http://[%s]" $service.Address}}
            {{- end}}
            ZTCONTROLLER_SERVER = "{{$upstreamAddress}}:{{$service.Port}}"
          {{- end -}}
        EOH
        destination = "local/ztcontroller.env"
        env         = true
      }

      template {
        data = <<-EOH
          ZTCONTROLLER_AUTHTOKEN="${ztcontroller_authtoken}"
          DNS_AUTHTOKEN="${dns_authtoken}"
        EOH
        destination = "secrets/api-keys.env"
        env         = true
      }

      template {
        data = <<-EOH
          SESSIONS_AUTH_KEY="${sessions_auth_key}"
          SESSIONS_ENCRYPTION_KEY="${sessions_encryption_key}"
          AUTHN_ADMIN_PW_HASH="${authn_admin_pw_hash}"
          ACTIONCABLE_HASH_KEY="${actioncable_hash_key}"
        EOH
        destination = "secrets/service-keys.env"
        env         = true
      }

      resources {
        cpu        = 50
        memory     = 64
        memory_max = 512
      }

      service {
        name     = "${service_name}"
        provider = "nomad"
        port     = "http"
        tags = [
          "caddy.enable=true",
          "caddy.reverse_proxy.public=${public_service}",
          "caddy.reverse_proxy.custom_hosts=${publish_service}",
          "caddy.reverse_proxy.host=${custom_name}",
        ]

        check {
          type         = "http"
          port         = "http"
          path         = "/"
          interval     = "5s"
          timeout      = "2s"
        }
      }
    }
  }

  group "controller" {
    count = 1

    network {
      mode = "host"
      port "zerotier_api" {
        host_network = "${host_network}"
        to = 9993
      }
    }

    task "zerotier_controller" {
      driver = "docker"

      config {
        image                  = "ghcr.io/sargassum-world/docker-zerotier-controller:v1.10.5"
        ports                  = ["zerotier_api"]
        advertise_ipv6_address = true

        mount {
          type     = "volume"
          target   = "/var/lib/zerotier-one"
          source   = "zerotier-controller-${service_name}"
          readonly = false
        }

        mount {
          type     = "bind"
          target   = "/var/lib/zerotier-one/authtoken.secret"
          source   = "secrets/authtoken.secret"
          readonly = true
        }
      }

      template {
        data = "${ztcontroller_authtoken}"
        destination = "secrets/authtoken.secret"
      }

      resources {
        cpu        = 1000
        memory     = 32
        memory_max = 128
      }

      service {
        name     = "${service_name}-ztcontroller"
        provider = "nomad"
        port     = "zerotier_api"
        tags = [
          "caddy.enable=true",
          "caddy.reverse_proxy.public=${ztcontroller_public_service}",
        ]

        check {
          type         = "http"
          port         = "zerotier_api"
          path         = "/status"
          interval     = "5s"
          timeout      = "2s"

          header {
            X-ZT1-Auth = ["${ztcontroller_authtoken}"]
          }
        }
      }
    }
  }
}
